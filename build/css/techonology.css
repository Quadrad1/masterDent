.content-block{margin:20px auto;width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;padding:15px;border:1px solid #D5D5D5;border-radius:5px;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.content-block img{width:28%;margin:20px auto;-ms-flex-item-align:start;align-self:flex-start}.text-block{width:68%;margin:10px auto}.text-block__title{color:#000;font-size:32px;font-weight:700;line-height:38px;margin:10px 0}.show-more,.text-block__description{color:#000;font-size:20px;line-height:25px}.text-block__description{margin:10px 0}.show-more{margin:15px 0;display:block}@media screen and (max-width:992px){.content-block{width:70%}.content-block img,.text-block{width:100%}}@media screen and (max-width:768px){.content-block{width:100%}.text-block__title{font-size:20px}.text-block__description{font-size:17px;line-height:20px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
