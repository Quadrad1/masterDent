.studyng-block,main{width:100%;position:relative}.studyng-block{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.studyng-block_title{width:95%;margin:20px auto 35px;color:#000;font-family:PT-Sans-Regular;font-size:24px;line-height:32px}.day{width:50%;padding:20px 32px;border-radius:10px 0 0 10px;background-color:#F7F7F7}.day_title{width:100%;color:#000;font-family:PT-Sans-Bold;font-size:32px;line-height:38px;margin-bottom:24px}.day h1,.day p{line-height:24px}.day h1{font-size:18px;font-style:italic}.day p{font-size:16px;color:#000;font-family:PT-Sans-SemiBold;padding-bottom:30px}.models,.price-block p{color:#000;font-family:PT-Sans-Regular;line-height:24px}.green{background-color:#E9FFF3;border-radius:0 10px 10px 0}.price-block{display:-webkit-box;display:-ms-flexbox;display:flex;width:50%;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.price-block p{margin:0 10px;font-size:19px}.models,.subscribe{margin:auto;font-size:18px}.models{width:50%}.subscribe{width:243px;border-radius:100px;background:linear-gradient(180deg,#72E4D5 0,#14C080 100%);font-family:PT-Sans-Bold;color:#fff;padding:8px 0;line-height:22px;text-align:center;border-bottom:5px solid green}@media screen and (max-width:768px){.studyng-block{-ms-flex-wrap:wrap;flex-wrap:wrap}.day{width:100%}.price-block{width:90%;margin:20px auto}.models{width:90%}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
